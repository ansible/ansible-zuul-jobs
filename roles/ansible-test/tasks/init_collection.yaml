---
- name: check if MANIFEST.json exists
  stat:
    path: "{{ ansible_test_location }}/MANIFEST.json"
  register: _manifest_json

# We've got two options here, either:
# - ansible_test_location points on a git clone of a collection, in this
#   case there is galaxy.yml file
# - or ansible_test_location points on the directory of collection installed
#   with ansible-galaxy (likely a tarball), in this case MANIFEST.json is
#   our best bet.
- when: _manifest_json.stat.exists
  block:
    - name: Copy the MANIFEST.json on the controller
      fetch:
        src: "{{ ansible_test_location }}/MANIFEST.json"
        dest: '{{ zuul.executor.work_root }}/tmp_fetch'
      register: _fetch
    - name: Load information from MANIFEST.json
      include_vars:
        file: '{{ _fetch.dest }}'
        name: galaxy_manifest
    - name: Setup location of project for integration tests
      set_fact:
        _test_location: "{{ ansible_test_collection_dir }}/{{ galaxy_manifest.collection_info.namespace }}/{{ galaxy_manifest.collection_info.name }}"
        _test_cfg_location: "{{ ansible_test_collection_dir }}/{{ galaxy_manifest.collection_info.namespace }}/{{ galaxy_manifest.collection_info.name }}/tests/integration/{{ ansible_test_test_command }}.cfg"


- when: not _manifest_json.stat.exists
  block:
    - name: Copy the galaxy.yml on the controller
      fetch:
        src: "{{ ansible_test_location }}/galaxy.yml"
        dest: '{{ zuul.executor.work_root }}/tmp_fetch'
      register: _fetch
    - name: Load information from galaxy.yml
      include_vars:
        file: '{{ _fetch.dest }}'
        name: galaxy_manifest
    - name: Setup location of project for integration tests
      set_fact:
        _test_location: "{{ ansible_test_collection_dir }}/{{ galaxy_info.namespace }}/{{ galaxy_info.name }}"
        _test_cfg_location: "{{ ansible_test_collection_dir }}/{{ galaxy_info.namespace }}/{{ galaxy_info.name }}/tests/integration/{{ ansible_test_test_command }}.cfg"

- name: Setup minimum test requirements
  set_fact:
    _test_requirements: '{% for requirement in ansible_test_requirement_files %} -r {{ _test_location }}/{{ requirement }}{% endfor %}'
    _test_constraints: '{% for constraint in ansible_test_constraint_files %} -c {{ _test_location }}/{{ constraint }}{% endfor %}'

- name: Ensure pip temp directory exists in /var/tmp
  file:
    state: directory
    path: /var/tmp/ansible-test-pip

- name: Install python requirements
  shell: "{{ ansible_test_venv_path }}/bin/pip install {{ _test_requirements }} {{ _test_constraints }}"
  register: r
  until: r.rc == 0
  retries: 2
  delay: 60
  environment:
    TMPDIR: /var/tmp/ansible-test-pip

- name: Copy potential cloud provider configuration for ansible-test in the collection
  shell: "cp -v {{ ansible_test_ansible_path }}/test/integration/cloud-config-*.ini {{ _test_location }}/tests/integration/"
  ignore_errors: true
  when: ansible_test_test_command == 'integration'
