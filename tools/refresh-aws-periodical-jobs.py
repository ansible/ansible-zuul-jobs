#!/usr/bin/env python3

from pathlib import Path
from pydantic import BaseModel, Field
from ruamel.yaml import YAML
from typing import Iterator, Union
import argparse
import json

parser = argparse.ArgumentParser()
parser.add_argument("repo_dir", type=Path, help="Location of the amazon.aws collection")

args = parser.parse_args()
to_skip = {"disabled", "unsupported"}


def list_targets(repo_dir: Path) -> Iterator[str]:
    targets_dir = repo_dir / "tests" / "integration" / "targets"
    for alias in targets_dir.glob("*/aliases"):
        skip_reason = set(alias.read_text().split("\n")) & to_skip
        if skip_reason:
            print(f"Skipping {alias.parent.stem} because {skip_reason}")
            continue
        yield alias.parent.stem


class Job(BaseModel):
    name: str
    nodeset: str = "container-ansible"
    parent: str = "ansible-test-cloud-integration-aws"
    vars: dict

    @classmethod
    def from_target_name(cls, target: str) -> "Job":
        return cls(
            name=f"integration-amazon.aws-target-{target}",
            vars={"ansible_test_integration_targets": target},
        )


class JobMapping(BaseModel):
    job: Job


class Jobs(BaseModel):
    jobs: list[JobMapping]


class RequiredProject(BaseModel):
    name: str


class PTJob(BaseModel):
    """Job entry for ProjectTemplate, not to confuse with regular Job"""

    required_projects: list[RequiredProject] = Field(alias="required-projects")


class Queue(BaseModel):
    ptjobs: list[str | dict[str, PTJob]] = Field(alias="jobs")


class ProjectTemplate(BaseModel):
    name: str
    periodic: Queue


def write_config(config_file: Path, config: list):
    class PushRootLeft:
        def __call__(self, s):
            result = []
            for line in s.splitlines(True):
                if line.startswith("---"):
                    result.append(
                        "# Generated by tools/refresh-aws-periodical-jobs.py\n"
                    )
                    result.append(line)
                else:
                    # lines start with 2 empty spaces because of the offset=2
                    result.append(line[2:])
            return "".join(result)

    yaml = YAML()
    yaml.indent(sequence=4, offset=2)
    yaml.explicit_start = True  # type: ignore
    yaml.dump(
        config,
        config_file,
        transform=PushRootLeft(),
    )


def __main__():
    jobs = Jobs(
        jobs=[
            JobMapping(job=Job.from_target_name(target))
            for target in list_targets(args.repo_dir)
        ]
    )

    build_ansible_collection = {
        "build-ansible-collection": {
            "required-projects": [
                {"name": "github.com/ansible-collections/ansible.utils"},
                {"name": "github.com/ansible-collections/ansible.netcommon"},
                {"name": "github.com/ansible-collections/community.aws"},
                {"name": "github.com/ansible-collections/community.general"},
                {"name": "github.com/ansible-collections/community.crypto"},
            ]
        }
    }

    project_template = ProjectTemplate(
        name="ansible-collections-amazon-aws-each-target",
        # we actually depend on ansible-test-splitter, but
        # it's listed in ansible-test-cloud-integration-aws
        #  dependency list
        periodic=Queue(
            jobs=[build_ansible_collection] + [job.job.name for job in jobs.jobs]
        ),
    )

    zuul_config_file = Path("zuul.d/amazon-aws-periodical-jobs.yaml")
    zuul_config = [job.dict(by_alias=True) for job in jobs.jobs] + [
        {"project-template": json.loads(project_template.json(by_alias=True))}
    ]
    write_config(zuul_config_file, zuul_config)
