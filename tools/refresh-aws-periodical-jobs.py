#!/usr/bin/env python3

from pathlib import Path
from pydantic import BaseModel, Field, Extra, validate_arguments
from ruamel.yaml import YAML
from typing import Iterator, Optional
import argparse

parser = argparse.ArgumentParser()
parser.add_argument("repo_dir", type=Path, help="Location of the amazon.aws collection")

args = parser.parse_args()
to_skip = {"disabled", "unsupported"}


def list_targets(repo_dir: Path) -> Iterator[str]:
    targets_dir = repo_dir / "tests" / "integration" / "targets"
    for alias in targets_dir.glob("*/aliases"):
        skip_reason = set(alias.read_text().split("\n")) & to_skip
        if skip_reason:
            print(f"Skipping {alias.parent.stem} because {skip_reason}")
            continue
        yield alias.parent.stem


class MyBaseModel(BaseModel):
    class Config:
        extra = Extra.forbid
        validate_assignment = True


class RequiredProject(MyBaseModel):
    name: str
    override_checkout: Optional[str] = Field(None, alias="override-checkout")


class JobDependency(MyBaseModel):
    name: str
    soft: Optional[bool] = None


class Job(MyBaseModel):
    name: str
    parent: Optional[str] = None
    nodeset: str = "container-ansible"
    dependencies: Optional[list[JobDependency]] = None
    pre_run: Optional[list[str]] = Field(
        None,
        alias="pre-run",
    )
    run: Optional[str] = None
    files: Optional[list] = None
    required_projects: Optional[list[RequiredProject]] = Field(
        None,
        alias="required-projects",
    )
    timeout: int = 3600
    vars: dict = {}
    semaphore: Optional[str] = None


class JobMapping(MyBaseModel):
    job: Job


class Jobs(MyBaseModel):
    jobs: list[JobMapping]


class PTJob(MyBaseModel):
    """Job entry for ProjectTemplate, not to confuse with regular Job"""

    required_projects: list[RequiredProject] = Field(alias="required-projects")
    vars: Optional[dict] = None


class Queue(MyBaseModel):
    queue: Optional[str] = None
    ptjobs: list[str | dict[str, PTJob]] = Field(alias="jobs")


class ProjectTemplate(MyBaseModel):
    name: str
    check: Optional[Queue] = None
    gate: Optional[Queue] = None
    ondemand: Optional[Queue] = None
    periodic: Optional[Queue] = None


class ProjectTemplateMapping(MyBaseModel):
    project_template: ProjectTemplate = Field(alias="project-template")


@validate_arguments
def write_config(config_file: Path, config: list[ProjectTemplateMapping | JobMapping]):
    class PushRootLeft:
        def __call__(self, s):
            result = []
            for line in s.splitlines(True):
                if line.startswith("---"):
                    result.append(
                        "# Generated by tools/refresh-aws-periodical-jobs.py\n"
                    )
                    result.append(line)
                else:
                    # lines start with 2 empty spaces because of the offset=2
                    result.append(line[2:])
            return "".join(result)

    yaml = YAML()
    yaml.indent(sequence=4, offset=2)
    yaml.explicit_start = True  # type: ignore
    yaml.dump(
        [i.dict(by_alias=True, exclude_none=True) for i in config],
        config_file,
        transform=PushRootLeft(),
    )


def aws_periodical_jobs():
    jobs = [
        JobMapping(
            job=AWSWorkerJob.from_target_name(
                collection="amazon.aws",
                name=f"integration-amazon.aws-target-{target}",
                nodeset="container-ansible",
                target=target,
            )
        )
        for target in list_targets(args.repo_dir)
    ]

    build_ansible_collection = {
        "build-ansible-collection": {
            "required-projects": [
                RequiredProject(name="github.com/ansible-collections/ansible.utils"),
                RequiredProject(
                    name="github.com/ansible-collections/ansible.netcommon"
                ),
                RequiredProject(name="github.com/ansible-collections/community.aws"),
                RequiredProject(
                    name="github.com/ansible-collections/community.general"
                ),
                RequiredProject(name="github.com/ansible-collections/community.crypto"),
            ]
        }
    }

    project_template = ProjectTemplate(
        name="ansible-collections-amazon-aws-each-target",
        # we actually depend on ansible-test-splitter, but
        # it's listed in ansible-test-cloud-integration-aws
        #  dependency list
        periodic=Queue(
            jobs=[build_ansible_collection] + [job.job.name for job in jobs]
        ),
    )

    zuul_config_file = Path("zuul.d/amazon-aws-periodical-jobs.yaml")
    zuul_config = jobs + [
        ProjectTemplateMapping(**{"project-template": project_template})
    ]
    write_config(zuul_config_file, zuul_config)


class AWSWorkerJob(Job):
    parent = "ansible-core-ci-aws-session"
    nodeset = "fedora-36-1vcpu"
    dependencies: list[JobDependency] = [
        JobDependency(name="build-ansible-collection"),
        JobDependency(name="ansible-test-splitter", soft=True),
    ]
    pre_run: list[str] = Field(
        [
            "playbooks/ansible-test-base/pre.yaml",
            "playbooks/ansible-cloud/aws/pre.yaml",
        ],
        alias="pre-run",
    )

    run = "playbooks/ansible-test-base/run.yaml"

    files = ["^plugins/.*$", "^tests/integration/.*$"]
    required_projects: list[RequiredProject] = Field(
        [
            RequiredProject(
                **{
                    "name": "github.com/ansible/ansible",
                    "override-checkout": "milestone",
                }
            ),
            RequiredProject(
                **{"name": "github.com/ansible-collections/community.aws"},
            ),
        ],
        alias="required-projects",
    )

    vars = {
        "ansible_test_command": "integration",
        "ansible_test_python": 3.9,
        "ansible_test_retry_on_error": True,
        "ansible_test_requirement_files": [
            "requirements.txt",
            "test-requirements.txt",
            "tests/integration/requirements.txt",
        ],
        "ansible_test_constraint_files": ["tests/integration/constraints.txt"],
    }
    semaphore = "ansible-test-cloud-integration-aws"

    @classmethod
    def from_target_name(cls, collection: str, target: str, **kwargs) -> "Job":
        new_instance = cls(**kwargs)
        new_instance.vars["ansible_test_integration_targets"] = target
        new_instance.vars[
            "ansible_collections_repo"
        ] = f"github.com/ansible-collections/{ collection }"
        return new_instance


@validate_arguments
def build_aws_worker(collection: str, idx: int) -> Job:
    new = AWSWorkerJob.from_target_name(
        name=f"integration-{collection}-{idx+1}",
        collection=collection,
        target="{{ child.targets_to_test[zuul.job] }}",
    )
    return new


def aws_integration_jobs(number_of_workers: int):
    amazon_aws_worker_jobs = [
        build_aws_worker("amazon.aws", idx) for idx in range(number_of_workers)
    ]
    community_aws_workder_jobs = [
        build_aws_worker("community.aws", idx) for idx in range(number_of_workers)
    ]

    build_ansible_collection = {
        "build-ansible-collection": {
            "required-projects": [
                RequiredProject(name="github.com/ansible-collections/ansible.utils"),
                RequiredProject(
                    name="github.com/ansible-collections/ansible.netcommon"
                ),
                RequiredProject(name="github.com/ansible-collections/community.aws"),
                RequiredProject(
                    name="github.com/ansible-collections/community.general"
                ),
                RequiredProject(name="github.com/ansible-collections/community.crypto"),
            ]
        }
    }

    @validate_arguments
    def ansible_test_splitter(
        only_test_changed: bool = True, with_community_aws: bool = False
    ):
        ansible_test_splitter__check_for_changes_in = (
            [
                "~/{{ zuul.projects['github.com/ansible-collections/amazon.aws'].src_dir }}",
                "~/{{ zuul.projects['github.com/ansible-collections/community.aws'].src_dir }}",
            ]
            if with_community_aws
            else [
                "~/{{ zuul.projects['github.com/ansible-collections/amazon.aws'].src_dir }}",
            ]
        )

        return {
            "ansible-test-splitter": {
                "required-projects": [
                    RequiredProject(name="github.com/ansible-collections/amazon.aws"),
                    RequiredProject(
                        name="github.com/ansible-collections/community.aws"
                    ),
                ],
                "vars": {
                    "ansible_test_splitter__test_changed": only_test_changed,
                    "ansible_test_splitter__check_for_changes_in": ansible_test_splitter__check_for_changes_in,
                    "ansible_test_splitter__total_job": number_of_workers,
                },
            }
        }

    worker_jobs = amazon_aws_worker_jobs + community_aws_workder_jobs
    amazon_aws_project_template = ProjectTemplate(
        name="ansible-collections-amazon-aws-integration",
        # we actually depend on ansible-test-splitter, but
        # it's listed in ansible-test-cloud-integration-aws
        #  dependency list
        check=Queue(
            jobs=[
                build_ansible_collection,
                ansible_test_splitter(with_community_aws=True),
            ]
            + [job.name for job in worker_jobs],
            queue="integrated-aws",
        ),
        gate=Queue(
            jobs=[
                build_ansible_collection,
                ansible_test_splitter(with_community_aws=True),
            ]
            + [job.name for job in worker_jobs],
            queue="integrated-aws",
        ),
        ondemand=Queue(
            jobs=[
                build_ansible_collection,
                ansible_test_splitter(only_test_changed=False, with_community_aws=True),
            ]
            + [job.name for job in worker_jobs],
            queue="integrated-aws",
        ),
    )

    community_aws_project_template = ProjectTemplate(
        name="ansible-collections-community-aws-integration",
        # we actually depend on ansible-test-splitter, but
        # it's listed in ansible-test-cloud-integration-aws
        #  dependency list
        check=Queue(
            jobs=[build_ansible_collection, ansible_test_splitter()]
            + [job.name for job in community_aws_workder_jobs],
            queue="integrated-aws",
        ),
        gate=Queue(
            jobs=[build_ansible_collection, ansible_test_splitter()]
            + [job.name for job in community_aws_workder_jobs],
            queue="integrated-aws",
        ),
        ondemand=Queue(
            jobs=[
                build_ansible_collection,
                ansible_test_splitter(only_test_changed=False),
            ]
            + [job.name for job in community_aws_workder_jobs],
            queue="integrated-aws",
        ),
    )
    zuul_config = [JobMapping(job=job) for job in worker_jobs] + [
        ProjectTemplateMapping(**{"project-template": amazon_aws_project_template}),
        ProjectTemplateMapping(**{"project-template": community_aws_project_template}),
    ]
    zuul_config_file = Path("zuul.d/aws-integration-worker-jobs.yaml")
    write_config(zuul_config_file, zuul_config)


if __name__ == "__main__":
    aws_periodical_jobs()
    aws_integration_jobs(number_of_workers=22)
